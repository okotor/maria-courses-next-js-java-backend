{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js-java-backend/lib/db.js"],"sourcesContent":["import { Pool } from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst pool = new Pool({\r\n  user: process.env.PG_USER,\r\n  host: process.env.PG_HOST,\r\n  database: process.env.PG_DATABASE,\r\n  password: process.env.PG_PASSWORD,\r\n  port: process.env.PG_PORT,\r\n});\r\n\r\nasync function connectDB() {\r\n  try {\r\n    await pool.connect();\r\n    console.log('Connected to PostgreSQL database');\r\n  } catch (error) {\r\n    console.error('Database connection error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Use named export for connectDB\r\nexport { connectDB };\r\nexport default pool;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,qIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,OAAO,IAAI,6FAAA,CAAA,OAAI,CAAC;IACpB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,MAAM,QAAQ,GAAG,CAAC,OAAO;AAC3B;AAEA,eAAe;IACb,IAAI;QACF,MAAM,KAAK,OAAO;QAClB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM;IACR;AACF;;uCAIe"}},
    {"offset": {"line": 74, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js-java-backend/lib/db-content.js"],"sourcesContent":["// import { S3 } from '@aws-sdk/client-s3';\r\nimport fs from 'node:fs/promises';\r\nimport pool from '@/lib/db';\r\nimport slugify from 'slugify';\r\nimport xss from 'xss';\r\n\r\n// const s3 = new S3({\r\n//     region: 'us-east-1',\r\n//     credentials: {\r\n//     accessKeyId: process.env.local.AWS_ACCESS_KEY_ID,\r\n//     secretAccessKey: process.env.local.AWS_SECRET_ACCESS_KEY,\r\n//   },\r\n//   });\r\n\r\nexport async function getCourses() {\r\n  await new Promise((resolve) => setTimeout(resolve, 1500)); // Simulate delay\r\n\r\n  try {\r\n    const response = await fetch('http://localhost:8080/courses');\r\n    if (!response.ok) {\r\n        throw new Error('Failed to fetch courses');\r\n    }\r\n    const result = await response.json();\r\n    \r\n    // Extract courses from the embedded object\r\n    const courses = result._embedded && result._embedded.courses ? result._embedded.courses : [];\r\n    \r\n    // Format the date in the result to YYYY-MM-DD format\r\n    const formattedCourses = courses.map(course => {\r\n        // Ensure the 'date' is a string in the correct format\r\n        if (course.date instanceof Date) {\r\n            course.date = course.date.toISOString().split('T')[0]; // Convert to 'YYYY-MM-DD' string\r\n        }\r\n        return course;\r\n    });\r\n\r\n    return formattedCourses; // Return the formatted courses\r\n  } catch (error) {\r\n      console.error('Error fetching courses:', error);\r\n      throw error;\r\n  }\r\n}\r\n\r\nexport async function getCourse(slug) {\r\n  try {\r\n      const response = await fetch(`http://localhost:8080/courses/${slug}`);\r\n      if (!response.ok) {\r\n          console.error(`Error: ${response.status} ${response.statusText}`);\r\n          throw new Error('Failed to fetch course');\r\n      }\r\n      const course = await response.json();\r\n      console.log('Fetched course:', course);\r\n      return course || null; // Return the course or null if not found\r\n  } catch (error) {\r\n      console.error('Error fetching course:', error);\r\n      throw error;\r\n  }\r\n}\r\n\r\nexport async function saveCourse(course) {\r\n  try {\r\n    const formData = new FormData();\r\n    formData.append(\"date\", course.date);\r\n    formData.append(\"title\", course.title);\r\n    formData.append(\"summary\", course.summary);\r\n    formData.append(\"courseDescription\", course.course_description);\r\n    formData.append(\"lecturer\", course.lecturer);\r\n    formData.append(\"lecturerEmail\", course.lecturer_email);\r\n    // formData.append(\"image\", course.image); // File object\r\n    formData.append(\"image\", course.image, course.image.name);\r\n    console.log(\"Sending FormData:\", [...formData.entries()]);\r\n\r\n    const response = await fetch(\"http://localhost:8080/courses/save\", {\r\n      method: \"POST\",\r\n      body: formData,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json(); // Return the saved course data\r\n  } catch (error) {\r\n    console.error(\"❌ Upload failed:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// export async function saveCourse(course) {\r\n//   try {\r\n//     // Generate a slug\r\n//     const twoSlugWords = course.title.split(\" \").slice(0, 2).join(\" \");\r\n//     const randomSlugAddition = Math.floor(Math.random() * 100) + 1;\r\n//     const modifiedTitle = `${twoSlugWords} ${randomSlugAddition}`;\r\n//     course.slug = slugify(modifiedTitle, { lower: true, strict: true });\r\n\r\n//     // Sanitize course description\r\n//     course.course_description = xss(course.course_description);\r\n\r\n//     // Handle image processing\r\n//     const extension = course.image.name.split('.').pop();\r\n//     const fileName = `${course.slug}.${extension}`;\r\n//     const filePath = `public/${fileName}`;\r\n\r\n//     // Save image to public directory\r\n//     const bufferedImage = await course.image.arrayBuffer();\r\n//     await fs.writeFile(filePath, Buffer.from(bufferedImage)); // No callback needed\r\n\r\n//     // Set image name for DB storage\r\n//     course.image = fileName;\r\n\r\n//     // Insert course into PostgreSQL\r\n//     const result = await pool.query(\r\n//       `INSERT INTO courses \r\n//         (date, slug, title, image, summary, course_description, lecturer, lecturer_email) \r\n//        VALUES ($1, $2, $3, $4, $5, $6, $7, $8) \r\n//        RETURNING id`,\r\n//       [\r\n//         course.date,\r\n//         course.slug,\r\n//         course.title,\r\n//         course.image,\r\n//         course.summary,\r\n//         course.course_description,\r\n//         course.lecturer,\r\n//         course.lecturer_email\r\n//       ]\r\n//     );\r\n\r\n//     return result.rows[0].id; // Return the inserted course ID\r\n//   } catch (error) {\r\n//     console.error(\"❌ Upload failed:\", error);\r\n//     throw error;\r\n//   }\r\n// }\r\n\r\n\r\n// SORTING COURSES\r\n\r\nexport async function getLatestCourses() {\r\n  try {\r\n    const response = await fetch(\"http://localhost:8080/courses/latest\"); // Adjust the URL if needed\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const courses = await response.json();\r\n\r\n    // Format the 'date' field before returning\r\n    return courses.map(course => ({\r\n      ...course,\r\n      date: new Date(course.date).toISOString().split(\"T\")[0], // Convert to 'YYYY-MM-DD'\r\n    }));\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching latest courses:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nexport async function getAvailableCourseYears() {\r\n  try {\r\n    const response = await fetch(\"http://localhost:8080/courses/years\"); // Adjust the URL if deployed\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n    return await response.json(); // Parses JSON response into a JavaScript array\r\n  } catch (error) {\r\n    console.error(\"Error fetching available course years:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nexport async function getCoursesForYear(year) {\r\n  try {\r\n    const response = await fetch(`http://localhost:8080/courses/year/${year}`); // Adjust URL if needed\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const courses = await response.json();\r\n\r\n    // Format the 'date' field before returning\r\n    return courses.map(course => ({\r\n      ...course,\r\n      date: new Date(course.date).toISOString().split(\"T\")[0], // Convert to 'YYYY-MM-DD'\r\n    }));\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching courses for year:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,2CAA2C;;;;;;;;;AAC3C;AACA;AACA;AACA;;;;;AAUO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS,QAAQ,iBAAiB;IAE5E,IAAI;QACF,MAAM,WAAW,MAAM,MAAM;QAC7B,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,SAAS,MAAM,SAAS,IAAI;QAElC,2CAA2C;QAC3C,MAAM,UAAU,OAAO,SAAS,IAAI,OAAO,SAAS,CAAC,OAAO,GAAG,OAAO,SAAS,CAAC,OAAO,GAAG,EAAE;QAE5F,qDAAqD;QACrD,MAAM,mBAAmB,QAAQ,GAAG,CAAC,CAAA;YACjC,sDAAsD;YACtD,IAAI,OAAO,IAAI,YAAY,MAAM;gBAC7B,OAAO,IAAI,GAAG,OAAO,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,iCAAiC;YAC5F;YACA,OAAO;QACX;QAEA,OAAO,kBAAkB,+BAA+B;IAC1D,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,MAAM;IACV;AACF;AAEO,eAAe,UAAU,IAAI;IAClC,IAAI;QACA,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,EAAE,MAAM;QACpE,IAAI,CAAC,SAAS,EAAE,EAAE;YACd,QAAQ,KAAK,CAAC,CAAC,OAAO,EAAE,SAAS,MAAM,CAAC,CAAC,EAAE,SAAS,UAAU,EAAE;YAChE,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,SAAS,MAAM,SAAS,IAAI;QAClC,QAAQ,GAAG,CAAC,mBAAmB;QAC/B,OAAO,UAAU,MAAM,yCAAyC;IACpE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM;IACV;AACF;AAEO,eAAe,WAAW,MAAM;IACrC,IAAI;QACF,MAAM,WAAW,IAAI;QACrB,SAAS,MAAM,CAAC,QAAQ,OAAO,IAAI;QACnC,SAAS,MAAM,CAAC,SAAS,OAAO,KAAK;QACrC,SAAS,MAAM,CAAC,WAAW,OAAO,OAAO;QACzC,SAAS,MAAM,CAAC,qBAAqB,OAAO,kBAAkB;QAC9D,SAAS,MAAM,CAAC,YAAY,OAAO,QAAQ;QAC3C,SAAS,MAAM,CAAC,iBAAiB,OAAO,cAAc;QACtD,yDAAyD;QACzD,SAAS,MAAM,CAAC,SAAS,OAAO,KAAK,EAAE,OAAO,KAAK,CAAC,IAAI;QACxD,QAAQ,GAAG,CAAC,qBAAqB;eAAI,SAAS,OAAO;SAAG;QAExD,MAAM,WAAW,MAAM,MAAM,sCAAsC;YACjE,QAAQ;YACR,MAAM;QACR;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAC1D;QAEA,OAAO,MAAM,SAAS,IAAI,IAAI,+BAA+B;IAC/D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,MAAM;IACR;AACF;AAqDO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,yCAAyC,2BAA2B;QACjG,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAC1D;QAEA,MAAM,UAAU,MAAM,SAAS,IAAI;QAEnC,2CAA2C;QAC3C,OAAO,QAAQ,GAAG,CAAC,CAAA,SAAU,CAAC;gBAC5B,GAAG,MAAM;gBACT,MAAM,IAAI,KAAK,OAAO,IAAI,EAAE,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YACzD,CAAC;IAEH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,wCAAwC,6BAA6B;QAClG,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAC1D;QACA,OAAO,MAAM,SAAS,IAAI,IAAI,+CAA+C;IAC/E,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;QACxD,MAAM;IACR;AACF;AAGO,eAAe,kBAAkB,IAAI;IAC1C,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,CAAC,mCAAmC,EAAE,MAAM,GAAG,uBAAuB;QACnG,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,MAAM,EAAE;QAC1D;QAEA,MAAM,UAAU,MAAM,SAAS,IAAI;QAEnC,2CAA2C;QAC3C,OAAO,QAAQ,GAAG,CAAC,CAAA,SAAU,CAAC;gBAC5B,GAAG,MAAM;gBACT,MAAM,IAAI,KAAK,OAAO,IAAI,EAAE,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;YACzD,CAAC;IAEH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,MAAM;IACR;AACF"}},
    {"offset": {"line": 209, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/courses/[Courseslug]/page.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"creator\": \"page-module__X1I2mW__creator\",\n  \"fade-slide-in-from-bottom\": \"page-module__X1I2mW__fade-slide-in-from-bottom\",\n  \"fade-slide-in-from-left\": \"page-module__X1I2mW__fade-slide-in-from-left\",\n  \"fade-slide-in-from-right\": \"page-module__X1I2mW__fade-slide-in-from-right\",\n  \"flash\": \"page-module__X1I2mW__flash\",\n  \"header\": \"page-module__X1I2mW__header\",\n  \"headerText\": \"page-module__X1I2mW__headerText\",\n  \"image\": \"page-module__X1I2mW__image\",\n  \"instructions\": \"page-module__X1I2mW__instructions\",\n  \"loading\": \"page-module__X1I2mW__loading\",\n  \"summary\": \"page-module__X1I2mW__summary\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js-java-backend/app/courses/%5BCourseslug%5D/page.js"],"sourcesContent":["import Image from 'next/image';\r\nimport { notFound } from 'next/navigation';\r\nimport { getCourse } from '@/lib/db-content'\r\nimport classes from './page.module.css'\r\n\r\nexport default async function CourseDetailsPage( { params } ) {\r\n    const { Courseslug } = await params;\r\n    const course = await getCourse(Courseslug);\r\n\r\n\r\n    // If the course is not found, show the not found page\r\n    if (!course) {\r\n        notFound();\r\n        return null; // Return null to stop further processing\r\n    }\r\n\r\n   // Replace newlines with <br /> tags in course description\r\n   const courseDescription = course.courseDescription ? course.courseDescription.replace(/\\n/g, '<br />') : '';\r\n\r\n    return (\r\n        <>\r\n            <header className={classes.header}>\r\n                <div className={classes.image}>\r\n                    <Image src={'/' + `${course.image}`} alt={course.title} fill/>\r\n                {/* https://marian-courses-bucket.s3.us-east-1.amazonaws.com/public/ */}\r\n                </div>\r\n                <div className={classes.headerText}>\r\n                    <h1>{course.title}</h1>\r\n                    <p className={classes.lecturer}></p>\r\n                        by <a href={`mailto:${course.lecturer_email}`}>{course.lecturer}</a>\r\n                </div>\r\n                <p className={classes.summary}>{course.summary}</p>\r\n            </header>\r\n            <main>\r\n                <p \r\n                className={classes.instructions}\r\n                dangerouslySetInnerHTML={{\r\n                    __html: courseDescription}}\r\n                ></p>\r\n            </main>\r\n        </>\r\n    );\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AAFA;;;;;;AAIe,eAAe,kBAAmB,EAAE,MAAM,EAAE;IACvD,MAAM,EAAE,UAAU,EAAE,GAAG,MAAM;IAC7B,MAAM,SAAS,MAAM,CAAA,GAAA,oHAAA,CAAA,YAAS,AAAD,EAAE;IAG/B,sDAAsD;IACtD,IAAI,CAAC,QAAQ;QACT,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;QACP,OAAO,MAAM,yCAAyC;IAC1D;IAED,0DAA0D;IAC1D,MAAM,oBAAoB,OAAO,iBAAiB,GAAG,OAAO,iBAAiB,CAAC,OAAO,CAAC,OAAO,YAAY;IAExG,qBACI;;0BACI,8OAAC;gBAAO,WAAW,uJAAA,CAAA,UAAO,CAAC,MAAM;;kCAC7B,8OAAC;wBAAI,WAAW,uJAAA,CAAA,UAAO,CAAC,KAAK;kCACzB,cAAA,8OAAC,6HAAA,CAAA,UAAK;4BAAC,KAAK,MAAM,GAAG,OAAO,KAAK,EAAE;4BAAE,KAAK,OAAO,KAAK;4BAAE,IAAI;;;;;;;;;;;kCAGhE,8OAAC;wBAAI,WAAW,uJAAA,CAAA,UAAO,CAAC,UAAU;;0CAC9B,8OAAC;0CAAI,OAAO,KAAK;;;;;;0CACjB,8OAAC;gCAAE,WAAW,uJAAA,CAAA,UAAO,CAAC,QAAQ;;;;;;4BAAM;0CAC7B,8OAAC;gCAAE,MAAM,CAAC,OAAO,EAAE,OAAO,cAAc,EAAE;0CAAG,OAAO,QAAQ;;;;;;;;;;;;kCAEvE,8OAAC;wBAAE,WAAW,uJAAA,CAAA,UAAO,CAAC,OAAO;kCAAG,OAAO,OAAO;;;;;;;;;;;;0BAElD,8OAAC;0BACG,cAAA,8OAAC;oBACD,WAAW,uJAAA,CAAA,UAAO,CAAC,YAAY;oBAC/B,yBAAyB;wBACrB,QAAQ;oBAAiB;;;;;;;;;;;;;AAK7C"}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 355, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 356, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}