{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/components/RegisterForm/RegisterForm.js/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/RegisterForm/RegisterForm.js <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/RegisterForm/RegisterForm.js <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/components/RegisterForm/RegisterForm.js/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/RegisterForm/RegisterForm.js from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/RegisterForm/RegisterForm.js\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/app/register/page.js"],"sourcesContent":["import RegisterForm from \"@/components/RegisterForm/RegisterForm\";\r\n\r\nexport default async function Register() {\r\n    return <RegisterForm />;\r\n}\r\n\r\n// import RegisterBox from '@/components/RegisterBox.js';\r\n\r\n// export default function Register() {\r\n\r\n// //     function handleRegisterPress() {\r\n//     user.registered = true;\r\n//     console.log('Registration requested. Registered:', user.registered)\r\n//   }\r\n\r\n//     return (\r\n//         <main id=\"main\">\r\n//             <RegisterBox onRegisterPress={() => handleRegisterPress()}>Register</RegisterBox>\r\n//         </main>\r\n//     );\r\n// }"],"names":[],"mappings":";;;;AAAA;;;AAEe,eAAe;IAC1B,qBAAO,8OAAC,0IAAA,CAAA,UAAY;;;;;AACxB,EAEA,yDAAyD;CAEzD,uCAAuC;CAEvC,0CAA0C;CAC1C,8BAA8B;CAC9B,0EAA0E;CAC1E,MAAM;CAEN,eAAe;CACf,2BAA2B;CAC3B,gGAAgG;CAChG,kBAAkB;CAClB,SAAS;CACT,IAAI"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/db-content.js"],"sourcesContent":["import { S3 } from '@aws-sdk/client-s3';\r\n\r\nimport fs from 'node:fs';\r\n\r\nimport sql from 'better-sqlite3';\r\nimport slugify from 'slugify';\r\nimport xss from 'xss';\r\n\r\n// const s3 = new S3({\r\n//     region: 'us-east-1',\r\n//     credentials: {\r\n//     accessKeyId: process.env.local.AWS_ACCESS_KEY_ID,\r\n//     secretAccessKey: process.env.local.AWS_SECRET_ACCESS_KEY,\r\n//   },\r\n//   });\r\nconst db = sql('courses.db');\r\n\r\nexport async function getCourses() {\r\n    await new Promise((resolve) => setTimeout(resolve, 1500));\r\n\r\n    // throw new Error('Loading meals failed');\r\n    return db.prepare('SELECT * FROM courses').all();\r\n}\r\n\r\nexport function getCourse(slug) {\r\n    const course = db.prepare('SELECT * FROM courses WHERE slug = ?').get(slug);\r\n    return course || null; // Return null if no course is found\r\n}\r\n\r\nexport async function saveCourse(course) {\r\n    try {\r\n        const twoSlugWords = course.title.split(\" \").slice(0, 2).join(\" \"); // Take first two words\r\n        const randomSlugAddition = Math.floor(Math.random() * 100) + 1;\r\n        const modifiedTitle = `${twoSlugWords} ${randomSlugAddition}`;\r\n        course.slug = slugify(modifiedTitle, { lower: true, strict: true }); // Convert to slug\r\n        course.course_description = xss(course.course_description)\r\n        \r\n        const extension = course.image.name.split('.').pop();\r\n        \r\n        const fileName = `${course.slug}.${extension}`\r\n\r\n        const stream = fs.createWriteStream(`public/${fileName}`)\r\n        const bufferedImage = await course.image.arrayBuffer();\r\n\r\n        stream.write(Buffer.from(bufferedImage), (error) => {\r\n            if (error) {\r\n                throw new Error('Ukládání obrázku selhalo!');\r\n            }\r\n        });\r\n\r\n        // console.log(\"🔹 Uploading to S3: \", `public/${fileName}`);\r\n\r\n        // await s3.putObject({\r\n        //     Bucket: 'marian-courses-bucket',\r\n        //     Key: `public/${fileName}`,\r\n        //     Body: Buffer.from(bufferedImage),\r\n        //     ContentType: course.image.type,\r\n        // });\r\n\r\n        // console.log(\"✅ Upload successful!\");\r\n\r\n        course.image = fileName;\r\n\r\n        return db.prepare(`\r\n            INSERT INTO courses \r\n                (date, slug, title, image, summary, course_description, lecturer, lecturer_email)\r\n            VALUES (\r\n                @date,\r\n                @slug,\r\n                @title,\r\n                @image,\r\n                @summary,\r\n                @course_description,\r\n                @lecturer,\r\n                @lecturer_email\r\n            )\r\n        `).run(course);\r\n        } catch (error) {\r\n            console.error(\"❌ Upload failed:\", error);\r\n        }\r\n    }\r\n\r\n\r\n// SORTING COURSES\r\n\r\n// export function getLatestCourses() {\r\n//   return db.prepare('SELECT * FROM courses').slice(0, 3);\r\n// }\r\n\r\nexport function getLatestCourses() {\r\n  return db.prepare(`\r\n    SELECT * FROM courses \r\n    ORDER BY \r\n      SUBSTR(date, 1, 4) DESC,                -- Order by Year descending\r\n      CAST(SUBSTR(date, 9, 2) AS INTEGER) DESC, -- Order by Month descending\r\n      CAST(SUBSTR(date, 6, 2) AS INTEGER) DESC  -- Order by Day descending\r\n    LIMIT 3\r\n  `).all();\r\n}\r\n\r\n// export function getAvailableCourseYears() {\r\n//   return db.prepare('SELECT * FROM courses').reduce((years, course) => {\r\n//     const year = new Date(course.date).getFullYear();\r\n//     if (!years.includes(year)) {\r\n//       years.push(year);\r\n//     }\r\n//     return years;\r\n//   }, []).sort((a, b) => b - a);\r\n// }\r\n\r\n// export function getAvailableCourseYears() {\r\n//   const courses = db.prepare('SELECT date FROM courses').all();\r\n//   return courses\r\n//     .map(course => {\r\n//         const parts = course.date.split(\"-\"); // Split by \"-\"\r\n//         const year = parts[0]; // First part is always the year (YYYY)\r\n//         return parseInt(year, 10); // Convert to number\r\n//     })\r\n//     .filter((year, index, self) => self.indexOf(year) === index) // Remove duplicates\r\n//     .sort((a, b) => b - a); // Sort in descending order\r\n// }\r\n\r\nexport function getAvailableCourseYears() { \r\n  const courses = db.prepare('SELECT date FROM courses').all();\r\n\r\n  return courses\r\n    .map(course => {\r\n        const parts = course.date.split(\"-\"); // Split by \"-\"\r\n        return {\r\n            year: parseInt(parts[0], 10),  // Extract year (YYYY)\r\n            day: parseInt(parts[1], 10),   // Extract day (DD)\r\n            month: parseInt(parts[2], 10)  // Extract month (MM)\r\n        };\r\n    })\r\n    .sort((a, b) => {\r\n        // Sort by year, then month, then day in descending order\r\n        return b.year - a.year || b.month - a.month || b.day - a.day;\r\n    })\r\n    .map(course => course.year) // Keep only the year\r\n    .filter((year, index, self) => self.indexOf(year) === index); // Remove duplicates\r\n}\r\n\r\nexport function getAvailableCourseMonths(year) {\r\n  return db.prepare('SELECT * FROM courses').reduce((months, course) => {\r\n    const newsYear = new Date(course.date).getFullYear();\r\n    if (newsYear === +year) {\r\n      const month = new Date(course.date).getMonth();\r\n      if (!months.includes(month)) {\r\n        months.push(month + 1);\r\n      }\r\n    }\r\n    return months;\r\n  }, []).sort((a, b) => b - a);\r\n}\r\n\r\n// export function getCoursesForYear(year) {\r\n//   return db.prepare('SELECT * FROM courses').filter(\r\n//     (course) => new Date(course.date).getFullYear() === +year\r\n//   );\r\n// }\r\n\r\nexport function getCoursesForYear(year) {\r\n  const courses = db.prepare(`\r\n    SELECT * FROM courses \r\n    WHERE SUBSTR(date, 1, 4) = ? \r\n    ORDER BY SUBSTR(date, 6, 2) ASC, SUBSTR(date, 9, 2) ASC\r\n  `).all(year.toString());\r\n  return courses;\r\n}\r\n\r\nexport function getCoursesForYearAndMonth(year, month) {\r\n  return db.prepare('SELECT * FROM courses').filter((course) => {\r\n    const newsYear = new Date(course.date).getFullYear();\r\n    const newsMonth = new Date(course.date).getMonth() + 1;\r\n    return newsYear === +year && newsMonth === +month;\r\n  });\r\n}\r\n\r\n\r\n// export async function getAllNews() {\r\n//   const news = db.prepare('SELECT * FROM news').all();\r\n//   await new Promise((resolve) => setTimeout(resolve, 2000));\r\n//   return news;\r\n// }\r\n\r\n// export async function getNewsItem(slug) {\r\n//   const newsItem = db.prepare('SELECT * FROM news WHERE slug = ?').get(slug);\r\n\r\n//   await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n//   return newsItem;\r\n// }\r\n\r\n// export async function getLatestNews() {\r\n//   const latestNews = db\r\n//     .prepare('SELECT * FROM news ORDER BY date DESC LIMIT 3')\r\n//     .all();\r\n//   await new Promise((resolve) => setTimeout(resolve, 2000));\r\n//   return latestNews;\r\n// }\r\n\r\n// export async function getAvailableNewsYears() {\r\n//   const years = db\r\n//     .prepare(\"SELECT DISTINCT strftime('%Y', date) as year FROM news\")\r\n//     .all()\r\n//     .map((year) => year.year);\r\n\r\n//   await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n//   return years;\r\n// }\r\n\r\n// export function getAvailableNewsMonths(year) {\r\n//   return db\r\n//     .prepare(\r\n//       \"SELECT DISTINCT strftime('%m', date) as month FROM news WHERE strftime('%Y', date) = ?\"\r\n//     )\r\n//     .all(year)\r\n//     .map((month) => month.month);\r\n// }\r\n\r\n// export async function getNewsForYear(year) {\r\n//   const news = db\r\n//     .prepare(\r\n//       \"SELECT * FROM news WHERE strftime('%Y', date) = ? ORDER BY date DESC\"\r\n//     )\r\n//     .all(year);\r\n\r\n//   await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n//   return news;\r\n// }\r\n\r\n// export async function getNewsForYearAndMonth(year, month) {\r\n//   const news = db\r\n//     .prepare(\r\n//       \"SELECT * FROM news WHERE strftime('%Y', date) = ? AND strftime('%m', date) = ? ORDER BY date DESC\"\r\n//     )\r\n//     .all(year, month);\r\n\r\n//   await new Promise((resolve) => setTimeout(resolve, 2000));\r\n\r\n//   return news;\r\n// }\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/init-auth-db.js"],"sourcesContent":["const sql = require('better-sqlite3');\n\nconst db = sql('authentications.db');\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS users (\n    id INTEGER PRIMARY KEY,\n    email TEXT UNIQUE,\n    password TEXT\n  );\n`);\n\ndb.exec(`CREATE TABLE IF NOT EXISTS sessions (\n  id TEXT NOT NULL PRIMARY KEY,\n  expires_at INTEGER NOT NULL,\n  user_id TEXT NOT NULL,\n  FOREIGN KEY (user_id) REFERENCES users(id)\n)`);\n\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS course_subscriptions (\n    id INTEGER PRIMARY KEY,\n    title TEXT,\n    image TEXT,\n    description TEXT\n  );\n`);\n\nconst hasSubscriptions =\n  db.prepare('SELECT COUNT(*) as count FROM course_subscriptions').get().count > 0;\n\nif (!hasSubscriptions) {\n  db.exec(`\n    INSERT INTO course_subscriptions (title, image, description)\n    VALUES\n    ('Zoltán', '/zoltan-zdravozivotnestylovy.png', 'Představujeme nejnovější a nejefektivnější metodu zdravého stravování.'),\n    ('Veronika', '/veronika-vytvarna.png', 'Když máš talent, dej o sobě vědět!'),\n    ('Barbora', '/barbora-botanickozkoumava.png', 'Zjednodušte si údržbu zeleně v domácnosti a na zahradě automatizovaným nástrojem Smart-Greenery.'),\n    ('Bedřich', '/bedrich-businessosportovni.png', 'Získej rovnouváhu ducha, duše i těla.'),\n    ('Sára', '/jo-73.png', 'Dáme to.'),\n    ('Uršula', '/ursula-umeleckovedecka.png', 'Jak vyvolat a upevnit zájem designer firem k zadávání uměleckých zakázek u vás na univerzitě.'),\n    ('Valerie', '/valerie-vynalezava.png', 'Buďte mezi tisícemi žen, které využívají revoluční metody líčení s Make-U-Up.');\n`);\n}\n\nmodule.exports = db;\n"],"names":[],"mappings":"AAAA,MAAM;AAEN,MAAM,KAAK,IAAI;AAEf,GAAG,IAAI,CAAC,CAAC;;;;;;AAMT,CAAC;AAED,GAAG,IAAI,CAAC,CAAC;;;;;CAKR,CAAC;AAEF,GAAG,IAAI,CAAC,CAAC;;;;;;;AAOT,CAAC;AAED,MAAM,mBACJ,GAAG,OAAO,CAAC,sDAAsD,GAAG,GAAG,KAAK,GAAG;AAEjF,IAAI,CAAC,kBAAkB;IACrB,GAAG,IAAI,CAAC,CAAC;;;;;;;;;;AAUX,CAAC;AACD;AAEA,OAAO,OAAO,GAAG"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 340, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/user.js"],"sourcesContent":["import db from \"@/init-auth-db\";\r\n\r\nexport function createUser(email,password) {\r\n    const result = db\r\n    .prepare('INSERT INTO users (email,password) VALUES (?, ?)')\r\n    .run(email, password);\r\n    return result.lastInsertRowid;\r\n}"],"names":[],"mappings":";;;AAAA;;AAEO,SAAS,WAAW,KAAK,EAAC,QAAQ;IACrC,MAAM,SAAS,kHAAA,CAAA,UAAE,CAChB,OAAO,CAAC,oDACR,GAAG,CAAC,OAAO;IACZ,OAAO,OAAO,eAAe;AACjC"}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 363, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/hash-passwords.js"],"sourcesContent":["import bcrypt from \"bcrypt\";\r\n\r\nexport async function hashUserPassword(originalPassword) {\r\n  const saltRounds = 10;\r\n  return new Promise((resolve, reject) => {\r\n      bcrypt.hash(originalPassword, saltRounds, (err, hashedPassword) => {\r\n          if (err) {\r\n              console.error(\"Error hashing password:\", err);\r\n              reject(err);\r\n          } else {\r\n              resolve(hashedPassword);\r\n          }\r\n      });\r\n  });\r\n}\r\n\r\nexport async function verifyPassword(reportedPassword, reportedUsername) {\r\n          try {\r\n          const checkUsername = await db.query(\"SELECT * FROM users WHERE username = $1\", [\r\n            reportedUsername,\r\n          ]);\r\n          if (checkUsername.rows.length > 0) {\r\n            const user = checkUsername.rows[0];\r\n            const storedHashedPassword = user.password;\r\n            const reportedHashedPassword = hashUserPassword(reportedPassword);\r\n            bcrypt.compare(reportedHashedPassword, storedHashedPassword, (err, valid) => {\r\n              if (err) {\r\n                console.error(\"Error comparing passwords:\", err);\r\n                return cb(err);\r\n              } else {\r\n                if (valid) {\r\n                  return cb(null, user);\r\n                } else {\r\n                  return cb(null, false);\r\n                }\r\n              }\r\n            })\r\n          // Database data insertion\r\n          } else {\r\n            return cb(\"User not found.\");\r\n          }\r\n        } catch (err) {\r\n          return cb(err);\r\n        }  \r\n}"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,iBAAiB,gBAAgB;IACrD,MAAM,aAAa;IACnB,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,kBAAkB,YAAY,CAAC,KAAK;YAC5C,IAAI,KAAK;gBACL,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,OAAO;YACX,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACF;AAEO,eAAe,eAAe,gBAAgB,EAAE,gBAAgB;IAC7D,IAAI;QACJ,MAAM,gBAAgB,MAAM,GAAG,KAAK,CAAC,2CAA2C;YAC9E;SACD;QACD,IAAI,cAAc,IAAI,CAAC,MAAM,GAAG,GAAG;YACjC,MAAM,OAAO,cAAc,IAAI,CAAC,EAAE;YAClC,MAAM,uBAAuB,KAAK,QAAQ;YAC1C,MAAM,yBAAyB,iBAAiB;YAChD,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,wBAAwB,sBAAsB,CAAC,KAAK;gBACjE,IAAI,KAAK;oBACP,QAAQ,KAAK,CAAC,8BAA8B;oBAC5C,OAAO,GAAG;gBACZ,OAAO;oBACL,IAAI,OAAO;wBACT,OAAO,GAAG,MAAM;oBAClB,OAAO;wBACL,OAAO,GAAG,MAAM;oBAClB;gBACF;YACF;QACF,0BAA0B;QAC1B,OAAO;YACL,OAAO,GAAG;QACZ;IACF,EAAE,OAAO,KAAK;QACZ,OAAO,GAAG;IACZ;AACR"}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 417, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/server-actions.js"],"sourcesContent":["'use server';\r\n\r\nimport { redirect } from 'next/navigation';\r\n\r\nimport { saveCourse } from \"./db-content\";\r\nimport { revalidatePath } from 'next/cache';\r\nimport { createUser } from '@/lib/user';\r\nimport { hashUserPassword } from './hash-passwords';\r\n\r\nfunction isInvalidText(text) {\r\n    return !text || text.trim() === '';\r\n}\r\n\r\nexport async function createACourse (prevState, formData) {\r\n    // Get the current date\r\n    const today = new Date();\r\n\r\n    // Extract the year, day, and month\r\n    const year = today.getFullYear();\r\n    const day = String(today.getDate()).padStart(2, '0'); // Ensure day is two digits\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Ensure month is two digits (months are zero-indexed)\r\n\r\n    // Format the date as YYYY-DD-MM\r\n    const formattedDate = `${year}-${day}-${month}`;\r\n\r\n    console.log(formattedDate); // Output will be in the format YYYY-DD-MM\r\n\r\n    const course = {\r\n        title: formData.get('title'),\r\n        summary: formData.get('summary'),\r\n        course_description: formData.get('course_description'),\r\n        lecturer: formData.get('name'),\r\n        lecturer_email: formData.get('email'),\r\n        image: formData.get('image'),\r\n        date: formattedDate\r\n    }\r\n\r\n    console.log(course);\r\n\r\n    if (\r\n      isInvalidText(course.title) ||\r\n      isInvalidText(course.summary) ||\r\n      isInvalidText(course.course_description) ||\r\n      isInvalidText(course.lecturer) ||\r\n      isInvalidText(course.lecturer_email) ||\r\n      !course.lecturer_email.includes('@') ||\r\n      !course.image ||\r\n      course.image.size === 0\r\n    ) {\r\n        return {\r\n            message: 'Je třeba vyplnit všechna pole validním obsahem.'\r\n        }\r\n    }\r\n  \r\n\r\n    await saveCourse(course);\r\n    revalidatePath('/courses');\r\n    redirect('/courses')\r\n}\r\n\r\n\r\n\r\nexport async function signup(prevState, formData){\r\n    const email = formData.get('email')\r\n    const password = formData.get('password')\r\n\r\n    let errors = {};\r\n\r\n    if (!email.includes('@')) {\r\n        errors.email = 'Vložte validní emailovou adresu.'\r\n    }\r\n\r\n    if (password.trim().length < 8) {\r\n        errors.password = 'Heslo musí mít alespoň 8 znaků.'\r\n    }\r\n\r\n    if (Object.keys(errors).length > 0) {\r\n        return {\r\n            errors,\r\n        };\r\n    }\r\n\r\n    const hashedPassword = await hashUserPassword(password);\r\n    console.log(\"Hashed Password:\", hashedPassword);\r\n    try {\r\n        createUser(email, hashedPassword);\r\n    } catch (error) {\r\n        if (error.code === 'SQLITE_CONSTRAINT_UNIQUE') {\r\n            return {\r\n                errors: {\r\n                    email: 'Vypadá to, že uživatel s touto emailovou adresou již existuje.'\r\n                }\r\n            };\r\n        }\r\n        throw error;\r\n    }\r\n    \r\n    redirect('/my-courses');\r\n}"],"names":[],"mappings":";;;;;;AAEA;AAEA;AACA;AACA;AACA;;AALA;;;;;;;;AAOA,SAAS,cAAc,IAAI;IACvB,OAAO,CAAC,QAAQ,KAAK,IAAI,OAAO;AACpC;AAEO,eAAe,uCAAW,GAAX,cAAe,SAAS,EAAE,QAAQ;IACpD,uBAAuB;IACvB,MAAM,QAAQ,IAAI;IAElB,mCAAmC;IACnC,MAAM,OAAO,MAAM,WAAW;IAC9B,MAAM,MAAM,OAAO,MAAM,OAAO,IAAI,QAAQ,CAAC,GAAG,MAAM,2BAA2B;IACjF,MAAM,QAAQ,OAAO,MAAM,QAAQ,KAAK,GAAG,QAAQ,CAAC,GAAG,MAAM,uDAAuD;IAEpH,gCAAgC;IAChC,MAAM,gBAAgB,GAAG,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,OAAO;IAE/C,QAAQ,GAAG,CAAC,gBAAgB,0CAA0C;IAEtE,MAAM,SAAS;QACX,OAAO,SAAS,GAAG,CAAC;QACpB,SAAS,SAAS,GAAG,CAAC;QACtB,oBAAoB,SAAS,GAAG,CAAC;QACjC,UAAU,SAAS,GAAG,CAAC;QACvB,gBAAgB,SAAS,GAAG,CAAC;QAC7B,OAAO,SAAS,GAAG,CAAC;QACpB,MAAM;IACV;IAEA,QAAQ,GAAG,CAAC;IAEZ,IACE,cAAc,OAAO,KAAK,KAC1B,cAAc,OAAO,OAAO,KAC5B,cAAc,OAAO,kBAAkB,KACvC,cAAc,OAAO,QAAQ,KAC7B,cAAc,OAAO,cAAc,KACnC,CAAC,OAAO,cAAc,CAAC,QAAQ,CAAC,QAChC,CAAC,OAAO,KAAK,IACb,OAAO,KAAK,CAAC,IAAI,KAAK,GACtB;QACE,OAAO;YACH,SAAS;QACb;IACJ;IAGA,MAAM,CAAA,GAAA,oHAAA,CAAA,aAAU,AAAD,EAAE;IACjB,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE;IACf,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACb;AAIO,eAAe,uCAAI,GAAJ,OAAO,SAAS,EAAE,QAAQ;IAC5C,MAAM,QAAQ,SAAS,GAAG,CAAC;IAC3B,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,IAAI,SAAS,CAAC;IAEd,IAAI,CAAC,MAAM,QAAQ,CAAC,MAAM;QACtB,OAAO,KAAK,GAAG;IACnB;IAEA,IAAI,SAAS,IAAI,GAAG,MAAM,GAAG,GAAG;QAC5B,OAAO,QAAQ,GAAG;IACtB;IAEA,IAAI,OAAO,IAAI,CAAC,QAAQ,MAAM,GAAG,GAAG;QAChC,OAAO;YACH;QACJ;IACJ;IAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD,EAAE;IAC9C,QAAQ,GAAG,CAAC,oBAAoB;IAChC,IAAI;QACA,CAAA,GAAA,2GAAA,CAAA,aAAU,AAAD,EAAE,OAAO;IACtB,EAAE,OAAO,OAAO;QACZ,IAAI,MAAM,IAAI,KAAK,4BAA4B;YAC3C,OAAO;gBACH,QAAQ;oBACJ,OAAO;gBACX;YACJ;QACJ;QACA,MAAM;IACV;IAEA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACb;;;IArFsB;IAiDA;;AAjDA,+OAAA;AAiDA,+OAAA"}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}