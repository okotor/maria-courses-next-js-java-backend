{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/components/RegisterForm/RegisterForm.js/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/RegisterForm/RegisterForm.js <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/RegisterForm/RegisterForm.js <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2S,GACxU,yEACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/components/RegisterForm/RegisterForm.js/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/components/RegisterForm/RegisterForm.js from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/components/RegisterForm/RegisterForm.js\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuR,GACpT,qDACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/app/register/page.js"],"sourcesContent":["import RegisterForm from \"@/components/RegisterForm/RegisterForm\";\r\n\r\nexport default async function Register() {\r\n    return <RegisterForm />;\r\n}\r\n\r\n// import RegisterBox from '@/components/RegisterBox.js';\r\n\r\n// export default function Register() {\r\n\r\n// //     function handleRegisterPress() {\r\n//     user.registered = true;\r\n//     console.log('Registration requested. Registered:', user.registered)\r\n//   }\r\n\r\n//     return (\r\n//         <main id=\"main\">\r\n//             <RegisterBox onRegisterPress={() => handleRegisterPress()}>Register</RegisterBox>\r\n//         </main>\r\n//     );\r\n// }"],"names":[],"mappings":";;;;AAAA;;;AAEe,eAAe;IAC1B,qBAAO,8OAAC,0IAAA,CAAA,UAAY;;;;;AACxB,EAEA,yDAAyD;CAEzD,uCAAuC;CAEvC,0CAA0C;CAC1C,8BAA8B;CAC9B,0EAA0E;CAC1E,MAAM;CAEN,eAAe;CACf,2BAA2B;CAC3B,gGAAgG;CAChG,kBAAkB;CAClB,SAAS;CACT,IAAI"}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/db.js"],"sourcesContent":["import { Pool } from 'pg';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst pool = new Pool({\r\n  user: process.env.PG_USER,\r\n  host: process.env.PG_HOST,\r\n  database: process.env.PG_DATABASE,\r\n  password: process.env.PG_PASSWORD,\r\n  port: process.env.PG_PORT,\r\n});\r\n\r\nasync function connectDB() {\r\n  try {\r\n    await pool.connect();\r\n    console.log('Connected to PostgreSQL database');\r\n  } catch (error) {\r\n    console.error('Database connection error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Use named export for connectDB\r\nexport { connectDB };\r\nexport default pool;\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEA,qIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,OAAO,IAAI,6FAAA,CAAA,OAAI,CAAC;IACpB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,MAAM,QAAQ,GAAG,CAAC,OAAO;IACzB,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,UAAU,QAAQ,GAAG,CAAC,WAAW;IACjC,MAAM,QAAQ,GAAG,CAAC,OAAO;AAC3B;AAEA,eAAe;IACb,IAAI;QACF,MAAM,KAAK,OAAO;QAClB,QAAQ,GAAG,CAAC;IACd,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM;IACR;AACF;;uCAIe"}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/db-content.js"],"sourcesContent":["// import { S3 } from '@aws-sdk/client-s3';\r\nimport fs from 'node:fs/promises';\r\nimport pool from '@/lib/db';\r\nimport slugify from 'slugify';\r\nimport xss from 'xss';\r\n\r\n// const s3 = new S3({\r\n//     region: 'us-east-1',\r\n//     credentials: {\r\n//     accessKeyId: process.env.local.AWS_ACCESS_KEY_ID,\r\n//     secretAccessKey: process.env.local.AWS_SECRET_ACCESS_KEY,\r\n//   },\r\n//   });\r\n\r\nexport async function getCourses() {\r\n  await new Promise((resolve) => setTimeout(resolve, 1500)); // Simulate delay\r\n\r\n  try {\r\n    const result = await pool.query('SELECT * FROM courses');\r\n    \r\n    // Format the date in the result to YYYY-MM-DD format\r\n    const courses = result.rows.map(course => {\r\n      // Ensure the 'date' is a string in the correct format\r\n      if (course.date instanceof Date) {\r\n        course.date = course.date.toISOString().split('T')[0]; // Convert to 'YYYY-MM-DD' string\r\n      }\r\n      return course;\r\n    });\r\n\r\n    return courses; // Return the formatted courses\r\n  } catch (error) {\r\n    console.error('Error fetching courses:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nexport async function getCourse(slug) {\r\n  try {\r\n    const result = await pool.query('SELECT * FROM courses WHERE slug = $1', [slug]);\r\n    return result.rows[0] || null; // Return the first course or null if not found\r\n  } catch (error) {\r\n    console.error('Error fetching course:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function saveCourse(course) {\r\n  try {\r\n    // Generate a slug\r\n    const twoSlugWords = course.title.split(\" \").slice(0, 2).join(\" \");\r\n    const randomSlugAddition = Math.floor(Math.random() * 100) + 1;\r\n    const modifiedTitle = `${twoSlugWords} ${randomSlugAddition}`;\r\n    course.slug = slugify(modifiedTitle, { lower: true, strict: true });\r\n\r\n    // Sanitize course description\r\n    course.course_description = xss(course.course_description);\r\n\r\n    // Handle image processing\r\n    const extension = course.image.name.split('.').pop();\r\n    const fileName = `${course.slug}.${extension}`;\r\n    const filePath = `public/${fileName}`;\r\n\r\n    // Save image to public directory\r\n    const bufferedImage = await course.image.arrayBuffer();\r\n    await fs.writeFile(filePath, Buffer.from(bufferedImage)); // No callback needed\r\n\r\n    // Set image name for DB storage\r\n    course.image = fileName;\r\n\r\n    // Insert course into PostgreSQL\r\n    const result = await pool.query(\r\n      `INSERT INTO courses \r\n        (date, slug, title, image, summary, course_description, lecturer, lecturer_email) \r\n       VALUES ($1, $2, $3, $4, $5, $6, $7, $8) \r\n       RETURNING id`,\r\n      [\r\n        course.date,\r\n        course.slug,\r\n        course.title,\r\n        course.image,\r\n        course.summary,\r\n        course.course_description,\r\n        course.lecturer,\r\n        course.lecturer_email\r\n      ]\r\n    );\r\n\r\n    return result.rows[0].id; // Return the inserted course ID\r\n  } catch (error) {\r\n    console.error(\"❌ Upload failed:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n// SORTING COURSES\r\n\r\nexport async function getLatestCourses() {\r\n  try {\r\n    const result = await pool.query(`\r\n      SELECT * FROM courses \r\n      ORDER BY date DESC \r\n      LIMIT 3\r\n    `);\r\n\r\n    // Format the 'date' field\r\n    const courses = result.rows.map(course => {\r\n      if (course.date instanceof Date) {\r\n        course.date = course.date.toISOString().split('T')[0]; // Convert to 'YYYY-MM-DD' string\r\n      }\r\n      return course;\r\n    });\r\n\r\n    return courses;\r\n  } catch (error) {\r\n    console.error('Error fetching latest courses:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nexport async function getAvailableCourseYears() {\r\n  try {\r\n    const result = await pool.query(`\r\n      SELECT DISTINCT EXTRACT(YEAR FROM date) AS year \r\n      FROM courses \r\n      ORDER BY year DESC\r\n    `);\r\n    return result.rows.map(row => row.year);\r\n  } catch (error) {\r\n    console.error('Error fetching available course years:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\nexport async function getCoursesForYear(year) {\r\n  try {\r\n    const result = await pool.query(`\r\n      SELECT * FROM courses \r\n      WHERE EXTRACT(YEAR FROM date) = $1 \r\n      ORDER BY date ASC\r\n    `, [year]);\r\n\r\n    // Format the 'date' field\r\n    const courses = result.rows.map(course => {\r\n      if (course.date instanceof Date) {\r\n        course.date = course.date.toISOString().split('T')[0]; // Convert to 'YYYY-MM-DD' string\r\n      }\r\n      return course;\r\n    });\r\n\r\n    return courses;\r\n  } catch (error) {\r\n    console.error('Error fetching courses for year:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n"],"names":[],"mappings":"AAAA,2CAA2C;;;;;;;;;AAC3C;AACA;AACA;AACA;;;;;AAUO,eAAe;IACpB,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS,QAAQ,iBAAiB;IAE5E,IAAI;QACF,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAI,CAAC,KAAK,CAAC;QAEhC,qDAAqD;QACrD,MAAM,UAAU,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;YAC9B,sDAAsD;YACtD,IAAI,OAAO,IAAI,YAAY,MAAM;gBAC/B,OAAO,IAAI,GAAG,OAAO,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,iCAAiC;YAC1F;YACA,OAAO;QACT;QAEA,OAAO,SAAS,+BAA+B;IACjD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,MAAM;IACR;AACF;AAGO,eAAe,UAAU,IAAI;IAClC,IAAI;QACF,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAI,CAAC,KAAK,CAAC,yCAAyC;YAAC;SAAK;QAC/E,OAAO,OAAO,IAAI,CAAC,EAAE,IAAI,MAAM,+CAA+C;IAChF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,MAAM;IACR;AACF;AAEO,eAAe,WAAW,MAAM;IACrC,IAAI;QACF,kBAAkB;QAClB,MAAM,eAAe,OAAO,KAAK,CAAC,KAAK,CAAC,KAAK,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC;QAC9D,MAAM,qBAAqB,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QAC7D,MAAM,gBAAgB,GAAG,aAAa,CAAC,EAAE,oBAAoB;QAC7D,OAAO,IAAI,GAAG,CAAA,GAAA,kIAAA,CAAA,UAAO,AAAD,EAAE,eAAe;YAAE,OAAO;YAAM,QAAQ;QAAK;QAEjE,8BAA8B;QAC9B,OAAO,kBAAkB,GAAG,CAAA,GAAA,mIAAA,CAAA,UAAG,AAAD,EAAE,OAAO,kBAAkB;QAEzD,0BAA0B;QAC1B,MAAM,YAAY,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG;QAClD,MAAM,WAAW,GAAG,OAAO,IAAI,CAAC,CAAC,EAAE,WAAW;QAC9C,MAAM,WAAW,CAAC,OAAO,EAAE,UAAU;QAErC,iCAAiC;QACjC,MAAM,gBAAgB,MAAM,OAAO,KAAK,CAAC,WAAW;QACpD,MAAM,qIAAA,CAAA,UAAE,CAAC,SAAS,CAAC,UAAU,OAAO,IAAI,CAAC,iBAAiB,qBAAqB;QAE/E,gCAAgC;QAChC,OAAO,KAAK,GAAG;QAEf,gCAAgC;QAChC,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAI,CAAC,KAAK,CAC7B,CAAC;;;mBAGY,CAAC,EACd;YACE,OAAO,IAAI;YACX,OAAO,IAAI;YACX,OAAO,KAAK;YACZ,OAAO,KAAK;YACZ,OAAO,OAAO;YACd,OAAO,kBAAkB;YACzB,OAAO,QAAQ;YACf,OAAO,cAAc;SACtB;QAGH,OAAO,OAAO,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,gCAAgC;IAC5D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,MAAM;IACR;AACF;AAKO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAI,CAAC,KAAK,CAAC,CAAC;;;;IAIjC,CAAC;QAED,0BAA0B;QAC1B,MAAM,UAAU,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;YAC9B,IAAI,OAAO,IAAI,YAAY,MAAM;gBAC/B,OAAO,IAAI,GAAG,OAAO,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,iCAAiC;YAC1F;YACA,OAAO;QACT;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,kCAAkC;QAChD,MAAM;IACR;AACF;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAI,CAAC,KAAK,CAAC,CAAC;;;;IAIjC,CAAC;QACD,OAAO,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA,MAAO,IAAI,IAAI;IACxC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;QACxD,MAAM;IACR;AACF;AAGO,eAAe,kBAAkB,IAAI;IAC1C,IAAI;QACF,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAI,CAAC,KAAK,CAAC,CAAC;;;;IAIjC,CAAC,EAAE;YAAC;SAAK;QAET,0BAA0B;QAC1B,MAAM,UAAU,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;YAC9B,IAAI,OAAO,IAAI,YAAY,MAAM;gBAC/B,OAAO,IAAI,GAAG,OAAO,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,iCAAiC;YAC1F;YACA,OAAO;QACT;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,MAAM;IACR;AACF"}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/user.js"],"sourcesContent":["import pool from '@/lib/db';\r\n\r\nexport async function createUser(email, password) {\r\n  try {\r\n    const result = await pool.query(\r\n      'INSERT INTO users (email, password) VALUES ($1, $2) RETURNING id',\r\n      [email, password]\r\n    );\r\n    return result.rows[0].id;\r\n  } catch (error) {\r\n    console.error('Error inserting user:', error);\r\n    throw error;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,eAAe,WAAW,KAAK,EAAE,QAAQ;IAC9C,IAAI;QACF,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAI,CAAC,KAAK,CAC7B,oEACA;YAAC;YAAO;SAAS;QAEnB,OAAO,OAAO,IAAI,CAAC,EAAE,CAAC,EAAE;IAC1B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM;IACR;AACF"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/hash-passwords.js"],"sourcesContent":["import pool from '@/lib/db';\r\nimport bcrypt from 'bcrypt';\r\n\r\nexport async function hashUserPassword(originalPassword) {\r\n  const saltRounds = 10;\r\n  return new Promise((resolve, reject) => {\r\n      bcrypt.hash(originalPassword, saltRounds, (err, hashedPassword) => {\r\n          if (err) {\r\n              console.error(\"Error hashing password:\", err);\r\n              reject(err);\r\n          } else {\r\n              resolve(hashedPassword);\r\n          }\r\n      });\r\n  });\r\n}\r\n\r\nexport async function verifyPassword(reportedPassword, reportedUsername) {\r\n  try {\r\n    // Query the database for the user\r\n    const result = await pool.query(\"SELECT * FROM users WHERE username = $1\", [reportedUsername]);\r\n\r\n    if (result.rows.length === 0) {\r\n      throw new Error(\"User not found.\");\r\n    }\r\n\r\n    const user = result.rows[0];\r\n    const storedHashedPassword = user.password;\r\n\r\n    // Compare the provided password with the stored hashed password\r\n    const isValid = await bcrypt.compare(reportedPassword, storedHashedPassword);\r\n\r\n    return isValid ? user : false;\r\n\r\n  } catch (err) {\r\n    console.error(\"Error verifying password:\", err);\r\n    throw err;\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe,iBAAiB,gBAAgB;IACrD,MAAM,aAAa;IACnB,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,kBAAkB,YAAY,CAAC,KAAK;YAC5C,IAAI,KAAK;gBACL,QAAQ,KAAK,CAAC,2BAA2B;gBACzC,OAAO;YACX,OAAO;gBACH,QAAQ;YACZ;QACJ;IACJ;AACF;AAEO,eAAe,eAAe,gBAAgB,EAAE,gBAAgB;IACrE,IAAI;QACF,kCAAkC;QAClC,MAAM,SAAS,MAAM,yGAAA,CAAA,UAAI,CAAC,KAAK,CAAC,2CAA2C;YAAC;SAAiB;QAE7F,IAAI,OAAO,IAAI,CAAC,MAAM,KAAK,GAAG;YAC5B,MAAM,IAAI,MAAM;QAClB;QAEA,MAAM,OAAO,OAAO,IAAI,CAAC,EAAE;QAC3B,MAAM,uBAAuB,KAAK,QAAQ;QAE1C,gEAAgE;QAChE,MAAM,UAAU,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,kBAAkB;QAEvD,OAAO,UAAU,OAAO;IAE1B,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM;IACR;AACF"}},
    {"offset": {"line": 374, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/server-actions.js"],"sourcesContent":["'use server';\r\n\r\nimport { redirect } from 'next/navigation';\r\nimport { saveCourse } from './db-content'; // Assumed to be connected to PostgreSQL\r\nimport { revalidatePath } from 'next/cache';\r\nimport { createUser } from '@/lib/user'; // Adjusted to work with PostgreSQL\r\nimport { hashUserPassword } from './hash-passwords';\r\n\r\n// Check if the text is invalid\r\nfunction isInvalidText(text) {\r\n    return !text || text.trim() === '';\r\n}\r\n\r\n// Create a course and store it in the PostgreSQL database\r\nexport async function createACourse(prevState, formData) {\r\n    // Get the current date\r\n    const today = new Date();\r\n\r\n    // Extract the year, day, and month\r\n    const year = today.getFullYear();\r\n    const day = String(today.getDate()).padStart(2, '0'); // Ensure day is two digits\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Ensure month is two digits (months are zero-indexed)\r\n\r\n    // Format the date as YYYY-MM-DD (not YYYY-DD-MM, fixed the order)\r\n    const formattedDate = `${year}-${month}-${day}`;\r\n\r\n    console.log(formattedDate); // Output will be in the format YYYY-MM-DD\r\n\r\n    const course = {\r\n        title: formData.get('title'),\r\n        summary: formData.get('summary'),\r\n        course_description: formData.get('course_description'),\r\n        lecturer: formData.get('name'),\r\n        lecturer_email: formData.get('email'),\r\n        image: formData.get('image'),\r\n        date: formattedDate\r\n    };\r\n\r\n    console.log(course);\r\n\r\n    // Validation checks for course fields\r\n    if (\r\n      isInvalidText(course.title) ||\r\n      isInvalidText(course.summary) ||\r\n      isInvalidText(course.course_description) ||\r\n      isInvalidText(course.lecturer) ||\r\n      isInvalidText(course.lecturer_email) ||\r\n      !course.lecturer_email.includes('@') ||\r\n      !course.image ||\r\n      course.image.size === 0\r\n    ) {\r\n        return {\r\n            message: 'Je třeba vyplnit všechna pole validním obsahem.'\r\n        };\r\n    }\r\n\r\n    // Save course to the PostgreSQL database\r\n    try {\r\n        await saveCourse(course); // Ensure saveCourse function is updated to handle PostgreSQL\r\n        // Return a success message for client-side handling\r\n        return { message: 'Kurz úspěšně vytvořen!' };\r\n        // revalidatePath('/courses');\r\n        // redirect('/courses');\r\n    } catch (error) {\r\n        console.error('Chyba při ukládání kurzu:', error);\r\n        return { message: 'Chyba při ukládání kurzu.' };\r\n    }\r\n    }\r\n            \r\n// Sign up a new user and save to PostgreSQL\r\nexport async function signup(prevState, formData) {\r\n    const email = formData.get('email');\r\n    const password = formData.get('password');\r\n\r\n    let errors = {};\r\n\r\n    // Validate email and password\r\n    if (!email.includes('@')) {\r\n        errors.email = 'Vložte validní emailovou adresu.';\r\n    }\r\n\r\n    if (password.trim().length < 8) {\r\n        errors.password = 'Heslo musí mít alespoň 8 znaků.';\r\n    }\r\n\r\n    if (Object.keys(errors).length > 0) {\r\n        return {\r\n            errors,\r\n        };\r\n    }\r\n\r\n    // Hash the password and create the user\r\n    try {\r\n        const hashedPassword = await hashUserPassword(password);\r\n        console.log(\"Hashed Password:\", hashedPassword);\r\n        await createUser(email, hashedPassword); // Ensure createUser function is updated to handle PostgreSQL\r\n    } catch (error) {\r\n        if (error.code === '23505') { // PostgreSQL unique constraint error code for duplicates\r\n            return {\r\n                errors: {\r\n                    email: 'Vypadá to, že uživatel s touto emailovou adresou již existuje.'\r\n                }\r\n            };\r\n        }\r\n        console.error('Error creating user:', error);\r\n        throw error;\r\n    }\r\n\r\n    redirect('/my-courses');\r\n}\r\n"],"names":[],"mappings":";;;;;;AAEA;AACA,uMAA2C,wCAAwC;AACnF;AACA,wLAAyC,mCAAmC;AAC5E;;AAJA;;;;;;;;AAMA,+BAA+B;AAC/B,SAAS,cAAc,IAAI;IACvB,OAAO,CAAC,QAAQ,KAAK,IAAI,OAAO;AACpC;AAGO,eAAe,uCAAW,GAAX,cAAc,SAAS,EAAE,QAAQ;IACnD,uBAAuB;IACvB,MAAM,QAAQ,IAAI;IAElB,mCAAmC;IACnC,MAAM,OAAO,MAAM,WAAW;IAC9B,MAAM,MAAM,OAAO,MAAM,OAAO,IAAI,QAAQ,CAAC,GAAG,MAAM,2BAA2B;IACjF,MAAM,QAAQ,OAAO,MAAM,QAAQ,KAAK,GAAG,QAAQ,CAAC,GAAG,MAAM,uDAAuD;IAEpH,kEAAkE;IAClE,MAAM,gBAAgB,GAAG,KAAK,CAAC,EAAE,MAAM,CAAC,EAAE,KAAK;IAE/C,QAAQ,GAAG,CAAC,gBAAgB,0CAA0C;IAEtE,MAAM,SAAS;QACX,OAAO,SAAS,GAAG,CAAC;QACpB,SAAS,SAAS,GAAG,CAAC;QACtB,oBAAoB,SAAS,GAAG,CAAC;QACjC,UAAU,SAAS,GAAG,CAAC;QACvB,gBAAgB,SAAS,GAAG,CAAC;QAC7B,OAAO,SAAS,GAAG,CAAC;QACpB,MAAM;IACV;IAEA,QAAQ,GAAG,CAAC;IAEZ,sCAAsC;IACtC,IACE,cAAc,OAAO,KAAK,KAC1B,cAAc,OAAO,OAAO,KAC5B,cAAc,OAAO,kBAAkB,KACvC,cAAc,OAAO,QAAQ,KAC7B,cAAc,OAAO,cAAc,KACnC,CAAC,OAAO,cAAc,CAAC,QAAQ,CAAC,QAChC,CAAC,OAAO,KAAK,IACb,OAAO,KAAK,CAAC,IAAI,KAAK,GACtB;QACE,OAAO;YACH,SAAS;QACb;IACJ;IAEA,yCAAyC;IACzC,IAAI;QACA,MAAM,CAAA,GAAA,oHAAA,CAAA,aAAU,AAAD,EAAE,SAAS,6DAA6D;QACvF,oDAAoD;QACpD,OAAO;YAAE,SAAS;QAAyB;IAC3C,8BAA8B;IAC9B,wBAAwB;IAC5B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO;YAAE,SAAS;QAA4B;IAClD;AACA;AAGG,eAAe,uCAAI,GAAJ,OAAO,SAAS,EAAE,QAAQ;IAC5C,MAAM,QAAQ,SAAS,GAAG,CAAC;IAC3B,MAAM,WAAW,SAAS,GAAG,CAAC;IAE9B,IAAI,SAAS,CAAC;IAEd,8BAA8B;IAC9B,IAAI,CAAC,MAAM,QAAQ,CAAC,MAAM;QACtB,OAAO,KAAK,GAAG;IACnB;IAEA,IAAI,SAAS,IAAI,GAAG,MAAM,GAAG,GAAG;QAC5B,OAAO,QAAQ,GAAG;IACtB;IAEA,IAAI,OAAO,IAAI,CAAC,QAAQ,MAAM,GAAG,GAAG;QAChC,OAAO;YACH;QACJ;IACJ;IAEA,wCAAwC;IACxC,IAAI;QACA,MAAM,iBAAiB,MAAM,CAAA,GAAA,wHAAA,CAAA,mBAAgB,AAAD,EAAE;QAC9C,QAAQ,GAAG,CAAC,oBAAoB;QAChC,MAAM,CAAA,GAAA,2GAAA,CAAA,aAAU,AAAD,EAAE,OAAO,iBAAiB,6DAA6D;IAC1G,EAAE,OAAO,OAAO;QACZ,IAAI,MAAM,IAAI,KAAK,SAAS;YACxB,OAAO;gBACH,QAAQ;oBACJ,OAAO;gBACX;YACJ;QACJ;QACA,QAAQ,KAAK,CAAC,wBAAwB;QACtC,MAAM;IACV;IAEA,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACb;;;IA/FsB;IAwDA;;AAxDA,+OAAA;AAwDA,+OAAA"}},
    {"offset": {"line": 487, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 493, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 496, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}