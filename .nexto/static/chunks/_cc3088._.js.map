{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/lib/server-actions.js"],"sourcesContent":["'use server';\r\n\r\nimport { redirect } from 'next/navigation';\r\nimport { saveCourse } from './db-content'; // Assumed to be connected to PostgreSQL\r\nimport { revalidatePath } from 'next/cache';\r\nimport { createUser } from '@/lib/user'; // Adjusted to work with PostgreSQL\r\nimport { hashUserPassword } from './hash-passwords';\r\n\r\n// Check if the text is invalid\r\nfunction isInvalidText(text) {\r\n    return !text || text.trim() === '';\r\n}\r\n\r\n// Create a course and store it in the PostgreSQL database\r\nexport async function createACourse(prevState, formData) {\r\n    // Get the current date\r\n    const today = new Date();\r\n\r\n    // Extract the year, day, and month\r\n    const year = today.getFullYear();\r\n    const day = String(today.getDate()).padStart(2, '0'); // Ensure day is two digits\r\n    const month = String(today.getMonth() + 1).padStart(2, '0'); // Ensure month is two digits (months are zero-indexed)\r\n\r\n    // Format the date as YYYY-MM-DD (not YYYY-DD-MM, fixed the order)\r\n    const formattedDate = `${year}-${month}-${day}`;\r\n\r\n    console.log(formattedDate); // Output will be in the format YYYY-MM-DD\r\n\r\n    const course = {\r\n        title: formData.get('title'),\r\n        summary: formData.get('summary'),\r\n        course_description: formData.get('course_description'),\r\n        lecturer: formData.get('name'),\r\n        lecturer_email: formData.get('email'),\r\n        image: formData.get('image'),\r\n        date: formattedDate\r\n    };\r\n\r\n    console.log(course);\r\n\r\n    // Validation checks for course fields\r\n    if (\r\n      isInvalidText(course.title) ||\r\n      isInvalidText(course.summary) ||\r\n      isInvalidText(course.course_description) ||\r\n      isInvalidText(course.lecturer) ||\r\n      isInvalidText(course.lecturer_email) ||\r\n      !course.lecturer_email.includes('@') ||\r\n      !course.image ||\r\n      course.image.size === 0\r\n    ) {\r\n        return {\r\n            message: 'Je třeba vyplnit všechna pole validním obsahem.'\r\n        };\r\n    }\r\n\r\n    // Save course to the PostgreSQL database\r\n    try {\r\n        await saveCourse(course); // Ensure saveCourse function is updated to handle PostgreSQL\r\n        // Return a success message for client-side handling\r\n        return { message: 'Kurz úspěšně vytvořen!' };\r\n        // revalidatePath('/courses');\r\n        // redirect('/courses');\r\n    } catch (error) {\r\n        console.error('Chyba při ukládání kurzu:', error);\r\n        return { message: 'Chyba při ukládání kurzu.' };\r\n    }\r\n    }\r\n            \r\n// Sign up a new user and save to PostgreSQL\r\nexport async function signup(prevState, formData) {\r\n    const email = formData.get('email');\r\n    const password = formData.get('password');\r\n\r\n    let errors = {};\r\n\r\n    // Validate email and password\r\n    if (!email.includes('@')) {\r\n        errors.email = 'Vložte validní emailovou adresu.';\r\n    }\r\n\r\n    if (password.trim().length < 8) {\r\n        errors.password = 'Heslo musí mít alespoň 8 znaků.';\r\n    }\r\n\r\n    if (Object.keys(errors).length > 0) {\r\n        return {\r\n            errors,\r\n        };\r\n    }\r\n\r\n    // Hash the password and create the user\r\n    try {\r\n        const hashedPassword = await hashUserPassword(password);\r\n        console.log(\"Hashed Password:\", hashedPassword);\r\n        await createUser(email, hashedPassword); // Ensure createUser function is updated to handle PostgreSQL\r\n    } catch (error) {\r\n        if (error.code === '23505') { // PostgreSQL unique constraint error code for duplicates\r\n            return {\r\n                errors: {\r\n                    email: 'Vypadá to, že uživatel s touto emailovou adresou již existuje.'\r\n                }\r\n            };\r\n        }\r\n        console.error('Error creating user:', error);\r\n        throw error;\r\n    }\r\n\r\n    redirect('/my-courses');\r\n}\r\n"],"names":[],"mappings":";;;;;;IAcsB;IAwDA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/components/RegisterForm/RegisterForm.js"],"sourcesContent":["'use client';\n\nimport Link from 'next/link';\nimport { useActionState } from 'react';\nimport { signup } from '@/lib/server-actions';\n\nexport default function RegisterForm() {\n  const [formState, formAction] = useActionState(signup, {});\n  return (\n    <form id=\"auth-form\" action={formAction}>\n      <div>\n        <img src=\"/images/auth-icon.jpg\" alt=\"A lock icon\" />\n      </div>\n      <p>\n        <label htmlFor=\"email\">Email: </label>\n        <input type=\"email\" name=\"email\" id=\"email\" />\n      </p>\n      <p>\n        <label htmlFor=\"password\">Heslo: </label>\n        <input type=\"password\" name=\"password\" id=\"password\" />\n      </p>\n      {formState.errors && (<ul id=\"form-errors\">\n        {Object.keys(formState.errors).map((error) => (\n          <li key={error}>{formState.errors[error]}</li>\n          ))}\n        </ul>)}\n      <p>\n        <button type=\"submit\">\n          Vytvořit účet\n        </button>\n      </p>\n      <p>\n        <Link href=\"/\">Přihlásit se existujícím účtem.</Link>\n      </p>\n    </form>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAMe,SAAS;;IACtB,MAAM,CAAC,WAAW,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,iBAAc,AAAD,EAAE,2HAAA,CAAA,SAAM,EAAE,CAAC;IACxD,qBACE,6LAAC;QAAK,IAAG;QAAY,QAAQ;;0BAC3B,6LAAC;0BACC,cAAA,6LAAC;oBAAI,KAAI;oBAAwB,KAAI;;;;;;;;;;;0BAEvC,6LAAC;;kCACC,6LAAC;wBAAM,SAAQ;kCAAQ;;;;;;kCACvB,6LAAC;wBAAM,MAAK;wBAAQ,MAAK;wBAAQ,IAAG;;;;;;;;;;;;0BAEtC,6LAAC;;kCACC,6LAAC;wBAAM,SAAQ;kCAAW;;;;;;kCAC1B,6LAAC;wBAAM,MAAK;wBAAW,MAAK;wBAAW,IAAG;;;;;;;;;;;;YAE3C,UAAU,MAAM,kBAAK,6LAAC;gBAAG,IAAG;0BAC1B,OAAO,IAAI,CAAC,UAAU,MAAM,EAAE,GAAG,CAAC,CAAC,sBAClC,6LAAC;kCAAgB,UAAU,MAAM,CAAC,MAAM;uBAA/B;;;;;;;;;;0BAGb,6LAAC;0BACC,cAAA,6LAAC;oBAAO,MAAK;8BAAS;;;;;;;;;;;0BAIxB,6LAAC;0BACC,cAAA,6LAAC,+JAAA,CAAA,UAAI;oBAAC,MAAK;8BAAI;;;;;;;;;;;;;;;;;AAIvB;GA9BwB;;QACU,6JAAA,CAAA,iBAAc;;;KADxB"}},
    {"offset": {"line": 165, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Tom/Desktop/maria-courses-next-js/node_modules/next/src/build/webpack/loaders/next-flight-loader/action-client-wrapper.ts"],"sourcesContent":["// This file must be bundled in the app's client layer, it shouldn't be directly\n// imported by the server.\n\nexport { callServer } from 'next/dist/client/app-call-server'\nexport { findSourceMapURL } from 'next/dist/client/app-find-source-map-url'\n\n// A noop wrapper to let the Flight client create the server reference.\n// See also: https://github.com/facebook/react/pull/26632\n// Since we're using the Edge build of Flight client for SSR [1], here we need to\n// also use the same Edge build to create the reference. For the client bundle,\n// we use the default and let Webpack to resolve it to the correct version.\n// 1: https://github.com/vercel/next.js/blob/16eb80b0b0be13f04a6407943664b5efd8f3d7d0/packages/next/src/server/app-render/use-flight-response.tsx#L24-L26\nexport const createServerReference = (\n  (!!process.env.NEXT_RUNTIME\n    ? // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client.edge')\n    : // eslint-disable-next-line import/no-extraneous-dependencies\n      require('react-server-dom-webpack/client')) as typeof import('react-server-dom-webpack/client')\n).createServerReference\n"],"names":["callServer","createServerReference","findSourceMapURL","process","env","NEXT_RUNTIME","require"],"mappings":"AAAA,gFAAgF;AAChF,0BAA0B;AAYrBG,QAAQC,GAAG,CAACC,YAAY,GAEvBC,QAAQ,0CAERA,QAAQ;;;;;;;;;;;;;;;;;IAdLN,UAAU,EAAA;eAAVA,eAAAA,UAAU;;IASNC,qBAAqB,EAAA;eAArBA;;IARJC,gBAAgB,EAAA;eAAhBA,qBAAAA,gBAAgB;;;+BADE;qCACM;AAQ1B,MAAMD,wBACV,CAAA,CAAC,6MAI2C,EAC7CA,qBAAqB","ignoreList":[0]}},
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}